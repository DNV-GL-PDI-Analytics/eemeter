PostgreSQL tables
-----------------

A data dictionary describing available datastore database tables.

Data loaded through ETL
^^^^^^^^^^^^^^^^^^^^^^^

.. csv-table::
   :header: "Name of Table", "Name of Row", "Description of Row"

   "datastore_project","",""
   "","id","Primary key"
   "","project_id","Unique project identifier provided by the user"
   "","project_owner_id","Foreign key to `datastore_projectowner` table (not currently used, but could be used to associate a user with a project)"
   "","baseline_period_start","[null]"
   "","baseline_period_end","Populated through ETL from project data"
   "","reporting_period_start","Populated through ETL from project data"
   "","reporting_period_end","[null]"
   "","zipcode","Populated through ETL from project data"
   "","added","Date Added"
   "","updated","Date updated"
   "datastore_consumptionmetadata","","Refers to an energy trace (a time series of data from a meter)"
   "","id","Primary key"
   "","project_id","Foriegn key to `datastore_project` table"
   "","interpretation","What type of Energy Data: Supplied from Grid; Unconsumed Onsite Generation (e.g., solar); Natural Gas Supplied"
   "","label","Used to distinguish traces of the same interpretation and unit within a single project"
   "","unit","Kwh, etc."
   "","added","Date that the data was added to the database"
   "","updated","Timestamp for last updated"
   "datastore_consumptionrecord","","Contains each consumption interval"
   "","id","Primary key"
   "","metadata_id","Foreign key to `datastore_consumptionmetadata` table"
   "","value","Consumption within the particular interval"
   "","estimated","T/F"
   "","start","start time of interval; end is given by next record (as ordered by start timestamp)."
   "datastore_projectattribute","","Custom attributes associated with a project."
   "","id","Primary key"
   "","key_id","Foreign key to the `datastore_projectattributekey` table"
   "","project_id","Foreign key to the `datastore_project` table"
   "","float_value","[null] unless associated `datastore_projectattributekey` row with `datatype` FLOAT"
   "","integer_value","[null] unless associated `datastore_projectattributekey` row with `datatype` INTEGER"
   "","boolean_value","[null] unless associated `datastore_projectattributekey` row with `datatype` BOOLEAN"
   "","char_value","[null] unless associated `datastore_projectattributekey` row with `datatype` CHAR"
   "","date_value","[null] unless associated `datastore_projectattributekey` row with `datatype` DATE"
   "","datetime_value","[null] unless associated `datastore_projectattributekey` row with `datatype` DATETIME"
   "datastore_projectattributekey","","Types of custom attributes associated with projects"
   "","id","Primary key"
   "","datatype","FLOAT/INTEGER/BOOLEAN/CHAR/DATE/DATETIME"
   "","name","Unique Name of Project Attribute type"
   "","display_name","Name of the Project Attribute type for display purposes"

Meter run result data
^^^^^^^^^^^^^^^^^^^^^

Data here is all organized underneath the `datastore_projectresult` table.

.. csv-table::
   :header: "Name of Table", "Name of Row", "Description of Row"

   "datastore_projectresult","","One for each meter run/result for each project"
   "","id","Primary key"
   "","project_id","Foreign key to the `datastore_project` table"
   "","meter_settings","[blank] would indicate any special settings used when running the meter"
   "","eemeter_version","0.4.0"
   "","meter_class","EnergyEfficiencyMeter; refers to which class of meter, i.e., DR meter"
   "","weather_normal_source_station","Uses TMY3 'normal' weather for a particular region - station given by 6 digit USAF id"
   "","weather_source_station","Observed temperatures - station given by 6-digit USAF id"
   "","added","Date added"
   "","updated","Date updated"
   "datastore_derivative","","One per interpretation per modeling period per energy trace"
   "","id","Primary key"
   "","energy_trace_model_result_id","foreign key to `datastore_energytracemodelresult` table"
   "","**value**","value of interpretation"
   "","upper","number to be added to `value` to obtain 95% upper bound"
   "","lower","number to be subtracted from `value` to obtain 95% lower bound"
   "","n","number of modeled values used in determining the derivative"
   "","interpretation","e.g., annualized weather normal; gross predicted"
   "datastore_derivativeaggregation","","One per project per derivative interpretation per trace interpretation (guarantees consistency between the baseline and reporting periods)"
   "","id","Primary key"
   "","project_result_id","Foreign key to `datastore_projectresult` table"
   "","modeling_period_group_id","Foreign key to `datastore_modelingperiodgroup` table"
   "","interpretation","Type of output - e.g., annualized weather normal; gross predicted (corresponds with `datastore_derivative.interpretation`)"
   "","trace_interpretation","electricity consumption supplied (e_c_s); all fuels; natural gas, etc. (corresponds with `datastore_consumptionmetadata.interpretation`)"
   "","**baseline_value**","Sum of values that match interpretations"
   "","baseline_upper","amount to be added to `baseline_value` to obtain 95% upper bound"
   "","baseline_lower","amount to be subtracted from `baseline_value` to obtain 95% lower bound"
   "","baseline_n","number of values that comprise the aggregation (sum of the n's of the derivatives)"
   "","**reporting_value**","Sum of values that match interpretations"
   "","reporting_upper","number to be added to `reporting_value` to obtain 95% upper bound"
   "","reporting_lower","number to be subtracted from `reporting_value` to obtain 95% lower bound"
   "","reporting_n","number of values that comprise the aggregation (sum of the n's of the derivatives)"
   "datastore_energytracemodelresult","","One per modeling period per energy trace id"
   "","id","Primary key"
   "","energy_trace_id","Foreign key to `datastore_consumptionmetadata` table"
   "","project_result_id","Foreign key to `datastore_projectresult` table"
   "","modeling_period_id","Foreign key to `datastore_modelingperiod` table"
   "","cvrmse","Coefficient of Variation of Root Mean Square Error (normalized RMSE)"
   "","lower","Amount to be subtracted from any individual modeled data point to obtain 95% lower bound"
   "","upper","Amount to be added to any individual modeled data point to stay within 95% upper bound"
   "","n","Number of datapoints in the section of the trace used for the model"
   "","r2",":math:`r^2` error; extent to which the model captures the variation in the data"
   "","rmse","Error term (root mean square error)"
   "","model_serialization","[blank] - the way that we store the model in case we want to rerun the model"
   "","status","SUCCESS/FAILURE"
   "","traceback","If `status` is 'FAILURE', the python traceback for the error that caused failure"
   "","input_start_date","Start date of data used for model building"
   "","input_end_date","End date of data used for model building"
   "","input_n_rows","Number of data points used for model building"
   "","records_start_date","Date of first available energy trace record, including those not explicitly used in model building"
   "","records_end_date","Date of last available energy trace record, including those not explicitly used in model building"
   "","records_count","Count of available energy trace records, including those not explicitly used in model building"
   "datastore_modelingperiod","","Project baseline end and project reporting start constitute the end points of an intervention; reporting periods generated by model using intervention as date reference. This is a temporary solution probably to be deprecated in next version of EEmeter."
   "","id","Primary key"
   "","interpretation","BASELINE/REPORTING"
   "","project_result_id","Foreign key to `datastore_projectresult` table"
   "","start_date","If baseline, `start_date` can be null; if reporting `start_date` required"
   "","end_date","If baseline, `end_date` required; if reporting `end_date` can be null"
   "datastore_modelingperiodgroup","","Meaningful pairs of Baseline and Reporting periods."
   "","id","Primary key"
   "","project_result_id","Foreign key to `datastore_projectresults` table"
   "","baseline_period_id","Foreign key to `datastore_modelingperiod` table"
   "","reporting_period_id","Foreign key to `datastore_modelingperiod` table"


Other reference tables
^^^^^^^^^^^^^^^^^^^^^^

.. csv-table::
   :header: "Name of Table", "Name of Row", "Description of Row"

   "datastore_projectrun","","Table of tasks used to trigger meter runs; should correspond to project results"
   "","id","Primary key"
   "","project_id","Foreign key to the `datastore_project` table"
   "","project_result_id","Foreign key to the `datastore_projectresult` table"
   "","meter_class","EnergyEfficiencyMeter; refers to which class of meter, i.e., DR meter"
   "","project_settings","[blank] would indicate any special settings used when running the meter"
   "","status","Task status: one of SUCCESS/PENDING/FAILED/RUNNING"
   "","added","Date added"
   "","updated","Date updated"
   "datastore_projectblock","","Groupings of projects"
   "","id","Primary key"
   "","name","Name for block"
   "","added","Date added"
   "","updated","Date updated"
   "datastore_projectblockprojects","","Many-to-many through table for project block groupings"
   "","id","Primary key"
   "","project_id","Foreign key to the `datastore_project` table"
   "","project_block_id","Foreign key to the `datastore_projectblock` table"
   "datastore_projectowner","","The datastore-specific user model; created in one-to-one with django User model."
   "","id","Primary key"
   "","user_id","Foreign key to the django User table"
   "","added","Date added"
   "","updated","Date updated"
